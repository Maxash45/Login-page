name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: 615299775895  # Replace with your AWS Account ID
  ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  ECS_CLUSTER: Zomato-app
  ECS_SERVICE: nginx
  ECS_TASK_DEFINITION: nginx

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Install dependencies
      run: sudo apt-get install -y jq

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPOSITORY

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M%S)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Retrieve and Update ECS Task Definition
      id: task-def
      run: |
        TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition || echo "ERROR")
        if [[ "$TASK_DEF_JSON" == "ERROR" ]]; then
          echo "Failed to retrieve task definition"
          exit 1
        fi
        
        CLEAN_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq 'del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
        NEW_TASK_DEF=$(echo "$CLEAN_TASK_DEF" | jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE_URI')

        echo "$NEW_TASK_DEF" > new-task-def.json
        
        NEW_TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query taskDefinition.revision --output text)
        echo "NEW_TASK_REVISION=$NEW_TASK_REVISION" >> $GITHUB_ENV

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION:$NEW_TASK_REVISION --force-new-deployment
